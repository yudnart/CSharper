name: Unit Tests

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_call:
    inputs:
      branch:
        description: 'Branch to test (e.g., main, feature/branch-name)'
        required: false
        type: string
      log-mode:
        description: 'Test logging mode: detailed, minimal, or failed-only'
        required: false
        default: 'failed-only'
        type: string
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to test (e.g., main, feature/branch-name)'
        required: false
      log-mode:
        description: 'Test logging mode: detailed, minimal, or failed-only'
        required: false
        default: 'failed-only'

jobs:
  main:
    runs-on: windows-latest  # Required for net48

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ (github.event_name == 'workflow_dispatch' || github.event_name == 'workflow_call') && (inputs.branch || github.event.inputs.branch || github.ref_name) || '' }}

      - name: Check installed SDKs
        id: check_sdks
        run: |
          # Check .NET Framework 4.8 SDK for net48 tests
          $net48Installed = (Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\NET Framework Setup\NDP\v4\Full" -ErrorAction SilentlyContinue).Version -ge "4.8"
          if (-not $net48Installed) {
            Write-Host "NET Framework 4.8 SDK not found"
            "net48_installed=false" | Out-File -Append -FilePath $env:GITHUB_OUTPUT
          } else {
            Write-Host "NET Framework 4.8 SDK found"
            "net48_installed=true" | Out-File -Append -FilePath $env:GITHUB_OUTPUT
          }

          # Check .NET 8 SDK for net8.0 tests (any 8.0.x version)
          $dotnet8Installed = (dotnet --list-sdks | Select-String '^8\.0\.\d+') -ne $null
          if (-not $dotnet8Installed) {
            Write-Host "NET 8.0 SDK not found"
            "dotnet8_installed=false" | Out-File -Append -FilePath $env:GITHUB_OUTPUT
          } else {
            Write-Host "NET 8.0 SDK found"
            "dotnet8_installed=true" | Out-File -Append -FilePath $env:GITHUB_OUTPUT
          }
        shell: pwsh

      - name: Setup .NET Framework 4.8 SDK
        if: steps.check_sdks.outputs.net48_installed != 'true'
        run: |
          Write-Host "Installing .NET Framework 4.8 SDK..."
          Invoke-WebRequest -Uri "https://go.microsoft.com/fwlink/?linkid=2088631" -OutFile "NDP48-DevPack-ENU.exe"
          Start-Process -FilePath "NDP48-DevPack-ENU.exe" -ArgumentList "/q /norestart" -Wait
          if ($LASTEXITCODE -ne 0) {
            Write-Error "Failed to install .NET Framework 4.8 SDK with exit code $LASTEXITCODE"
            exit $LASTEXITCODE
          }
          Write-Host ".NET Framework 4.8 SDK installed successfully"
        shell: pwsh

      - name: Setup .NET 8 SDK
        if: steps.check_sdks.outputs.dotnet8_installed != 'true'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x

      - name: Try download build artifacts
        id: download_artifacts
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.run_id }}
          path: .

      - name: Restore dependencies
        if: steps.download_artifacts.outcome != 'success'
        run: dotnet restore
        shell: pwsh

      - name: Build
        if: steps.download_artifacts.outcome != 'success'
        run: dotnet build --configuration Release --no-restore
        shell: pwsh

      - name: Check for parallel.runsettings
        id: check_parallel_settings
        run: |
          if (Test-Path "tests/parallel.runsettings") {
            Write-Host "parallel.runsettings found, enabling parallel test execution"
            "use_parallel=true" | Out-File -Append -FilePath $env:GITHUB_OUTPUT
          } else {
            Write-Host "`e[1;34m[To run your tests in parallel, please include the settings file at 'tests/parallel.runsettings'.]`e[0m"
            "use_parallel=false" | Out-File -Append -FilePath $env:GITHUB_OUTPUT
          }
        shell: pwsh

      - name: Run unit tests
        run: |
          $TEST_PROJECTS = Get-ChildItem -Path tests -Filter "*.csproj" -Recurse
          if (-not $TEST_PROJECTS) {
            Write-Error "No test projects found in tests directory"
            exit 1
          }
          $LOG_MODE = "${{ inputs.log-mode || github.event.inputs.log-mode || 'failed-only' }}"
          $USE_PARALLEL = "${{ steps.check_parallel_settings.outputs.use_parallel }}"
          foreach ($PROJ in $TEST_PROJECTS) {
            Write-Host "Running tests for $PROJ with log mode $LOG_MODE"
            if ($LOG_MODE -eq "failed-only") {
              $OUTPUT_FILE = "test-output-$($PROJ.BaseName).txt"
              if ($USE_PARALLEL -eq "true") {
                # Parallel execution
                dotnet test $PROJ --configuration Release --no-build --verbosity minimal --logger "console;verbosity=minimal" --settings tests/parallel.runsettings --collect:"XPlat Code Coverage" --results-directory ./coverage /p:CoverletOutputFormat=opencover /p:CoverletOutput=../$COVERAGE_FILE > $OUTPUT_FILE
              } else {
                # Sequential execution
                dotnet test $PROJ --configuration Release --no-build --verbosity minimal --logger "console;verbosity=minimal" --framework net48 --collect:"XPlat Code Coverage" --results-directory ./coverage /p:CoverletOutputFormat=opencover /p:CoverletOutput=../$COVERAGE_FILE > $OUTPUT_FILE
                $EXIT_CODE_NET48 = $LASTEXITCODE
                if ($EXIT_CODE_NET48 -eq 0) {
                  dotnet test $PROJ --configuration Release --no-build --verbosity minimal --logger "console;verbosity=minimal" --framework net8.0 --collect:"XPlat Code Coverage" --results-directory ./coverage /p:CoverletOutputFormat=opencover /p:CoverletOutput=../$COVERAGE_FILE >> $OUTPUT_FILE
                }
              }
              $EXIT_CODE = $LASTEXITCODE
              if ($EXIT_CODE -ne 0 -or $EXIT_CODE_NET48 -ne 0) {
                $FAILED_TESTS = Select-String -Path $OUTPUT_FILE -Pattern "Failed\s+.*" | ForEach-Object { $_.Line }
                if ($FAILED_TESTS) {
                  Write-Host "Failed tests for $PROJ (net48, net8.0):"
                  $FAILED_TESTS | ForEach-Object { Write-Host $_ }
                } else {
                  Write-Host "No failed tests for $PROJ (net48, net8.0), but exit code $EXIT_CODE indicates failure"
                  Get-Content $OUTPUT_FILE
                }
                exit 1
              } else {
                Write-Host "No failed tests for $PROJ (net48, net8.0)"
              }
            } elseif ($LOG_MODE -eq "minimal") {
              if ($USE_PARALLEL -eq "true") {
                dotnet test $PROJ --configuration Release --no-build --verbosity minimal --settings tests/parallel.runsettings --collect:"XPlat Code Coverage" --results-directory ./coverage /p:CoverletOutputFormat=opencover /p:CoverletOutput=../$COVERAGE_FILE
              } else {
                dotnet test $PROJ --configuration Release --no-build --verbosity minimal --framework net48 --collect:"XPlat Code Coverage" --results-directory ./coverage /p:CoverletOutputFormat=opencover /p:CoverletOutput=../$COVERAGE_FILE
                if ($LASTEXITCODE -eq 0) {
                  dotnet test $PROJ --configuration Release --no-build --verbosity minimal --framework net8.0 --collect:"XPlat Code Coverage" --results-directory ./coverage /p:CoverletOutputFormat=opencover /p:CoverletOutput=../$COVERAGE_FILE
                }
              }
              if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }
            } else {
              if ($USE_PARALLEL -eq "true") {
                dotnet test $PROJ --configuration Release --no-build --verbosity normal --logger "console;verbosity=detailed" --settings tests/parallel.runsettings --collect:"XPlat Code Coverage" --results-directory ./coverage /p:CoverletOutputFormat=opencover /p:CoverletOutput=../$COVERAGE_FILE
              } else {
                dotnet test $PROJ --configuration Release --no-build --verbosity normal --logger "console;verbosity=detailed" --framework net48 --collect:"XPlat Code Coverage" --results-directory ./coverage /p:CoverletOutputFormat=opencover /p:CoverletOutput=../$COVERAGE_FILE
                if ($LASTEXITCODE -eq 0) {
                  dotnet test $PROJ --configuration Release --no-build --verbosity normal --logger "console;verbosity=detailed" --framework net8.0 --collect:"XPlat Code Coverage" --results-directory ./coverage /p:CoverletOutputFormat=opencover /p:CoverletOutput=../$COVERAGE_FILE
                }
              }
              if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }
            }
          }
        shell: pwsh

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage/*.opencover.xml
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          verbose: true