name: Publish to NuGet

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'           # Matches stable releases, e.g., v1.0.0
      - 'v[0-9]+.[0-9]+.[0-9]+-*'        # Matches prereleases, e.g., v1.0.0-beta1
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to test (e.g., main, feature/branch-name)'
        required: false
      version:
        description: 'Version to use for manual run (e.g., 1.0.0 or 1.0.0-beta1)'
        required: false
        default: '1.0.0'
      dry_run:
        description: 'Run in dry-run mode (log actions without publishing/unlisting)'
        required: false
        default: 'true'

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || github.ref_name }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x

      - name: Restore dependencies
        run: dotnet restore
        shell: pwsh

      - name: Build
        run: dotnet build --configuration Release --no-restore
        shell: pwsh

      - name: Debug artifact contents
        run: |
          Write-Host "Listing files to be included in build-artifacts-${{ github.run_id }}"
          Get-ChildItem -Path . -Recurse -Include bin/Release/*,obj/* | ForEach-Object { Write-Host $_.FullName }
        shell: pwsh

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.run_id }}
          path: |
            **/bin/Release/
            **/obj/
          retention-days: 1

  run-unit-tests:
    needs: build
    uses: ./.github/workflows/run-unit-tests.yml
    with:
      branch: ${{ github.event.inputs.branch || github.ref_name }}
      log-mode: 'failed-only'

  publish-to-nuget:
    runs-on: windows-latest
    needs: [build, run-unit-tests]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || github.ref_name }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.run_id }}
          path: .

      - name: Debug downloaded artifacts
        run: |
          Write-Host "Listing downloaded build-artifacts-${{ github.run_id }}"
          Get-ChildItem -Path . -Recurse -Include bin/Release/*,obj/* | ForEach-Object { Write-Host $_.FullName }
        shell: pwsh

      - name: Restore dependencies
        run: |
          Write-Host "Restoring dependencies for packing"
          dotnet restore
          if ($LASTEXITCODE -ne 0) {
            Write-Error "dotnet restore failed with exit code $LASTEXITCODE"
            exit $LASTEXITCODE
          }
        shell: pwsh

      - name: Extract Package ID
        id: extract_package_id
        run: |
          $CSPROJ_PATH = "src/CSharper/CSharper.csproj"
          $PACKAGE_ID = Select-Xml -Path $CSPROJ_PATH -XPath "//PropertyGroup/PackageId" | ForEach-Object { $_.Node.InnerText }
          if (-not $PACKAGE_ID) {
            Write-Error "PackageId not found in $CSPROJ_PATH"
            exit 1
          }
          Write-Host "Extracted Package ID: $PACKAGE_ID"
          "PACKAGE_ID=$PACKAGE_ID" | Out-File -Append -FilePath $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Extract version
        id: extract_version
        run: |
          if ("${{ github.event_name }}" -eq "workflow_dispatch") {
            $VERSION = "${{ github.event.inputs.version }}"
            if ("${{ github.event.inputs.dry_run }}" -eq "true") {
              Write-Host "Event name: ${{ github.event_name }}"
              Write-Host "Extracted VERSION: $VERSION"
            }
          } else {
            $TAG = "${{ github.ref_name }}"
            $VERSION = $TAG -replace '^v', ''
          }
          if (-not $VERSION) {
            Write-Error "Error: VERSION is empty"
            exit 1
          }
          if ($VERSION -match '^[0-9]+\.[0-9]+\.[0-9]+(-.*)?$') {
            $IS_STABLE = if ($VERSION -notlike '*-*') { 1 } else { 0 }
          } else {
            Write-Error "Error: VERSION '$VERSION' does not match expected format (e.g., 1.0.0 or 1.0.0-beta1)"
            exit 1
          }
          Write-Host "Final VERSION: $VERSION"
          Write-Host "IS_STABLE: $IS_STABLE"
          "VERSION=$VERSION" | Out-File -Append -FilePath $env:GITHUB_OUTPUT
          "IS_STABLE=$IS_STABLE" | Out-File -Append -FilePath $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Pack NuGet package
        run: |
          Write-Host "Packing NuGet package with version ${{ steps.extract_version.outputs.VERSION }}"
          dotnet pack --configuration Release --no-build `
            -p:PackageVersion=${{ steps.extract_version.outputs.VERSION }} `
            -o ./nupkg
          if ($LASTEXITCODE -ne 0) {
            Write-Error "dotnet pack failed with exit code $LASTEXITCODE"
            exit $LASTEXITCODE
          }
          Write-Host "Generated NuGet package(s):"
          Get-ChildItem -Path ./nupkg -Filter "*.nupkg" | ForEach-Object { Write-Host $_.FullName }
          if (-not (Test-Path ./nupkg/*.nupkg)) {
            Write-Error "No .nupkg files found in ./nupkg after dotnet pack"
            exit 1
          }
        shell: pwsh

      - name: Publish to NuGet (Dry Run)
        if: github.event.inputs.dry_run == 'true'
        run: |
          Write-Host "Dry run: Would publish NuGet package(s) from ./nupkg:"
          Get-ChildItem -Path ./nupkg -Filter "*.nupkg"
          Write-Host "Would run: dotnet nuget push ./nupkg/*.nupkg --api-key [REDACTED] --source https://api.nuget.org/v3/index.json"
        shell: pwsh

      - name: Publish to NuGet
        if: github.event.inputs.dry_run != 'true'
        run: |
          Write-Host "Publishing NuGet package(s) from ./nupkg:"
          Write-Host "Current directory: $PWD"
          Get-ChildItem -Path ./nupkg -Filter "*.nupkg"
          if (-not (Test-Path ./nupkg/*.nupkg)) {
            Write-Error "No .nupkg files found in ./nupkg before dotnet nuget push"
            exit 1
          }
          $nupkgFiles = Get-ChildItem -Path ./nupkg -Filter "*.nupkg"
          foreach ($file in $nupkgFiles) {
            Write-Host "Pushing $file"
            dotnet nuget push $file.FullName `
              --api-key ${{ secrets.NUGET_API_KEY }} `
              --source https://api.nuget.org/v3/index.json
            if ($LASTEXITCODE -ne 0) {
              Write-Error "dotnet nuget push failed for $file with exit code $LASTEXITCODE"
              exit $LASTEXITCODE
            }
          }
        shell: pwsh

      - name: Unlist all prerelease packages (Dry Run)
        if: steps.extract_version.outputs.IS_STABLE == '1' && github.event.inputs.dry_run == 'true'
        run: |
          $PACKAGE_ID = "${{ steps.extract_package_id.outputs.PACKAGE_ID }}"
          $VERSION = "${{ steps.extract_version.outputs.VERSION }}"
          Write-Host "Dry run: Querying prerelease versions for ${PACKAGE_ID} matching ${VERSION}-*"
          $PRERELEASE_VERSIONS = (Invoke-WebRequest -Uri "https://api.nuget.org/v3/registration5-semver1/$PACKAGE_ID/index.json" -UseBasicParsing | ConvertFrom-Json).items.items | Where-Object { $_.catalogEntry.version -like "${VERSION}-*" } | ForEach-Object { $_.catalogEntry.version }
          if (-not $PRERELEASE_VERSIONS) {
            Write-Host "Dry run: No prerelease versions found for ${PACKAGE_ID} matching ${VERSION}-*"
          } else {
            Write-Host "Dry run: Would unlist the following prerelease versions for ${PACKAGE_ID}:"
            foreach ($VERSION in $PRERELEASE_VERSIONS) {
              Write-Host "- $VERSION"
              Write-Host "Would run: dotnet nuget delete $PACKAGE_ID $VERSION --api-key [REDACTED] --source https://api.nuget.org/v3/index.json --non-interactive"
            }
          }
        shell: pwsh

      - name: Unlist all prerelease packages
        if: steps.extract_version.outputs.IS_STABLE == '1' && github.event.inputs.dry_run != 'true'
        run: |
          $PACKAGE_ID = "${{ steps.extract_package_id.outputs.PACKAGE_ID }}"
          $VERSION = "${{ steps.extract_version.outputs.VERSION }}"
          Write-Host "Unlisting prerelease packages for ${PACKAGE_ID} matching ${VERSION}-*"
          $PRERELEASE_VERSIONS = (Invoke-WebRequest -Uri "https://api.nuget.org/v3/registration5-semver1/$PACKAGE_ID/index.json" -UseBasicParsing | ConvertFrom-Json).items.items | Where-Object { $_.catalogEntry.version -like "${VERSION}-*" } | ForEach-Object { $_.catalogEntry.version }
          if (-not $PRERELEASE_VERSIONS) {
            Write-Host "No prerelease versions found for ${PACKAGE_ID} matching ${VERSION}-*"
          } else {
            foreach ($VERSION in $PRERELEASE_VERSIONS) {
              Write-Host "Unlisting prerelease package ${PACKAGE_ID} version $VERSION"
              dotnet nuget delete $PACKAGE_ID $VERSION `
                --api-key ${{ secrets.NUGET_API_KEY }} `
                --source https://api.nuget.org/v3/index.json `
                --non-interactive
            }
          }
        shell: pwsh
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}