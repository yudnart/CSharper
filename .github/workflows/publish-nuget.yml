name: Publish to NuGet

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'           # Matches stable releases, e.g., v1.0.0
      - 'v[0-9]+.[0-9]+.[0-9]+-*'        # Matches prereleases, e.g., v1.0.0-beta1
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run in dry-run mode (log actions without publishing/unlisting)'
        required: false
        default: 'false'
      version:
        description: 'Version to use for manual run (e.g., 1.0.0 or 1.0.0-beta1)'
        required: false
        default: '1.0.0'

jobs:
  build-and-publish:
    runs-on: windows-latest  # Required for net48 tests

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x
          # .NET Framework 4.8 SDK is pre-installed on windows-latest

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Run unit tests
        run: |
          $TEST_PROJECTS = Get-ChildItem -Path tests -Filter "*.csproj" -Recurse
          if (-not $TEST_PROJECTS) {
            Write-Error "No test projects found in tests directory"
            exit 1
          }
          foreach ($PROJ in $TEST_PROJECTS) {
            Write-Host "Running tests for $PROJ"
            $VERBOSITY = if ("${{ github.event.inputs.dry_run }}" -eq "true") { "detailed" } else { "normal" }
            dotnet test $PROJ --configuration Release --no-build --verbosity $VERBOSITY --framework net48
            if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }
            dotnet test $PROJ --configuration Release --no-build --verbosity $VERBOSITY --framework net8.0
            if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }
          }
        shell: pwsh  # PowerShell for better Windows scripting

      - name: Extract version
        id: extract_version
        run: |
          if ("${{ github.event_name }}" -eq "workflow_dispatch") {
            $VERSION = "${{ github.event.inputs.version }}"
            if ("${{ github.event.inputs.dry_run }}" -eq "true") {
              Write-Host "Event name: ${{ github.event_name }}"
              Write-Host "Extracted VERSION: $VERSION"
            }
          } else {
            $TAG = "${{ github.ref_name }}"
            $VERSION = $TAG -replace '^v', ''
          }
          if (-not $VERSION) {
            Write-Error "Error: VERSION is empty"
            exit 1
          }
          if ($VERSION -match '^[0-9]+\.[0-9]+\.[0-9]+$') {
            $IS_STABLE = 1
          } else {
            $IS_STABLE = 0
          }
          if ("${{ github.event.inputs.dry_run }}" -eq "true") {
            Write-Host "IS_STABLE: $IS_STABLE"
          }
          "VERSION=$VERSION" | Out-File -Append -FilePath $env:GITHUB_OUTPUT
          "IS_STABLE=$IS_STABLE" | Out-File -Append -FilePath $env:GITHUB_OUTPUT
        shell: pwsh  # PowerShell for consistency

      - name: Pack NuGet package
        run: |
          dotnet pack --configuration Release --no-build `
            -p:PackageVersion=${{ steps.extract_version.outputs.VERSION }} `
            -o ./nupkg
        shell: pwsh

      - name: Publish to NuGet (Dry Run)
        if: github.event.inputs.dry_run == 'true'
        run: |
          Write-Host "Dry run: Would publish NuGet package(s) from ./nupkg:"
          Get-ChildItem -Path ./nupkg -Filter "*.nupkg"
          Write-Host "Would run: dotnet nuget push ./nupkg/*.nupkg --api-key [REDACTED] --source https://api.nuget.org/v3/index.json"
        shell: pwsh

      - name: Publish to NuGet
        if: github.event.inputs.dry_run != 'true'
        run: |
          dotnet nuget push ./nupkg/*.nupkg `
            --api-key ${{ secrets.NUGET_API_KEY }} `
            --source https://api.nuget.org/v3/index.json
        shell: pwsh

      - name: Unlist all prerelease packages (Dry Run)
        if: steps.extract_version.outputs.IS_STABLE == '1' && github.event.inputs.dry_run == 'true'
        run: |
          $PACKAGE_ID = "Your.Package.Name"
          Write-Host "Dry run: Querying prerelease versions for $PACKAGE_ID"
          $PRERELEASE_VERSIONS = (Invoke-WebRequest -Uri "https://api.nuget.org/v3/registration5-semver1/$PACKAGE_ID/index.json" -UseBasicParsing | ConvertFrom-Json).items.items | Where-Object { $_.catalogEntry.version -like '*-*' } | ForEach-Object { $_.catalogEntry.version }
          if (-not $PRERELEASE_VERSIONS) {
            Write-Host "Dry run: No prerelease versions found for $PACKAGE_ID"
          } else {
            Write-Host "Dry run: Would unlist the following prerelease versions for $PACKAGE_ID:"
            foreach ($VERSION in $PRERELEASE_VERSIONS) {
              Write-Host "- $VERSION"
              Write-Host "Would run: dotnet nuget delete $PACKAGE_ID $VERSION --api-key [REDACTED] --source https://api.nuget.org/v3/index.json --non-interactive"
            }
          }
        shell: pwsh

      - name: Unlist all prerelease packages
        if: steps.extract_version.outputs.IS_STABLE == '1' && github.event.inputs.dry_run != 'true'
        run: |
          $PACKAGE_ID = "Your.Package.Name"
          $PRERELEASE_VERSIONS = (Invoke-WebRequest -Uri "https://api.nuget.org/v3/registration5-semver1/$PACKAGE_ID/index.json" -UseBasicParsing | ConvertFrom-Json).items.items | Where-Object { $_.catalogEntry.version -like '*-*' } | ForEach-Object { $_.catalogEntry.version }
          foreach ($VERSION in $PRERELEASE_VERSIONS) {
            Write-Host "Unlisting prerelease package $PACKAGE_ID version $VERSION"
            dotnet nuget delete $PACKAGE_ID $VERSION `
              --api-key ${{ secrets.NUGET_API_KEY }} `
              --source https://api.nuget.org/v3/index.json `
              --non-interactive
          }
        shell: pwsh
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}