name: Publish to NuGet

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'           # Matches stable releases, e.g., v1.0.0
      - 'v[0-9]+.[0-9]+.[0-9]+-*'        # Matches prereleases, e.g., v1.0.0-beta1
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run in dry-run mode (log actions without publishing/unlisting)'
        required: false
        default: 'false'

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Extract version from tag
        id: extract_version
        run: |
          TAG=${{ github.ref_name }}
          VERSION=$(echo $TAG | sed 's/^v//') # Remove 'v' prefix
          # Check if it's a stable release (no prerelease suffix)
          IS_STABLE=$(echo $VERSION | grep -c -E '^[0-9]+\.[0-9]+\.[0-9]+$')
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "IS_STABLE=$IS_STABLE" >> $GITHUB_OUTPUT

      - name: Pack NuGet package
        run: |
          dotnet pack --configuration Release --no-build \
            -p:PackageVersion=${{ steps.extract_version.outputs.VERSION }} \
            -o ./nupkg

      - name: Publish to NuGet (Dry Run)
        if: github.event.inputs.dry_run == 'true'
        run: |
          echo "Dry run: Would publish NuGet package(s) from ./nupkg:"
          ls -l ./nupkg/*.nupkg
          echo "Would run: dotnet nuget push ./nupkg/*.nupkg --api-key [REDACTED] --source https://api.nuget.org/v3/index.json"

      - name: Publish to NuGet
        if: github.event.inputs.dry_run != 'true'
        run: |
          dotnet nuget push ./nupkg/*.nupkg \
            --api-key ${{ secrets.NUGET_API_KEY }} \
            --source https://api.nuget.org/v3/index.json

      - name: Unlist all prerelease packages (Dry Run)
        if: steps.extract_version.outputs.IS_STABLE == '1' && github.event.inputs.dry_run == 'true'
        run: |
          # Replace with your actual NuGet package ID
          PACKAGE_ID="Your.Package.Name"
          
          # Query NuGet for all prerelease versions of the package
          PRERELEASE_VERSIONS=$(curl -s "https://api.nuget.org/v3/registration5-semver1/$PACKAGE_ID/index.json" | \
            jq -r '.items[].items[] | select(.catalogEntry.version | contains("-")) | .catalogEntry.version' || echo "")
          
          if [ -z "$PRERELEASE_VERSIONS" ]; then
            echo "Dry run: No prerelease versions found for $PACKAGE_ID"
          else
            echo "Dry run: Would unlist the following prerelease versions for $PACKAGE_ID:"
            for VERSION in $PRERELEASE_VERSIONS; do
              echo "- $VERSION"
              echo "Would run: dotnet nuget delete $PACKAGE_ID $VERSION --api-key [REDACTED] --source https://api.nuget.org/v3/index.json --non-interactive"
            done
          fi

      - name: Unlist all prerelease packages
        if: steps.extract_version.outputs.IS_STABLE == '1' && github.event.inputs.dry_run != 'true'
        run: |
          # Replace with your actual NuGet package ID
          PACKAGE_ID="Your.Package.Name"
          
          # Query NuGet for all prerelease versions of the package
          PRERELEASE_VERSIONS=$(curl -s "https://api.nuget.org/v3/registration5-semver1/$PACKAGE_ID/index.json" | \
            jq -r '.items[].items[] | select(.catalogEntry.version | contains("-")) | .catalogEntry.version')
          
          # Loop through prerelease versions and unlist them
          for VERSION in $PRERELEASE_VERSIONS; do
            echo "Unlisting prerelease package $PACKAGE_ID version $VERSION"
            dotnet nuget delete $PACKAGE_ID $VERSION \
              --api-key ${{ secrets.NUGET_API_KEY }} \
              --source https://api.nuget.org/v3/index.json \
              --non-interactive
          done
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}