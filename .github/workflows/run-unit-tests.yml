name: Run Unit Tests

on:
  pull_request:
    branches:
      - main
      - develop  # Add other branches if needed
  workflow_call:
    inputs:
      branch:
        description: 'Branch to test (e.g., main, feature/branch-name)'
        required: false
        type: string
      log-mode:
        description: 'Test logging mode: detailed, minimal, or failed-only'
        required: false
        default: 'failed-only'
        type: string
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to test (e.g., main, feature/branch-name)'
        required: false
      log-mode:
        description: 'Test logging mode: detailed, minimal, or failed-only'
        required: false
        default: 'failed-only'

jobs:
  test:
    runs-on: windows-latest  # Required for net48

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch || github.event.inputs.branch || github.ref_name }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x
          # .NET Framework 4.8 SDK is pre-installed on windows-latest

      - name: Try download build artifacts
        id: download_artifacts
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.run_id }}
          path: .

      - name: Restore dependencies
        if: steps.download_artifacts.outcome != 'success'
        run: dotnet restore
        shell: pwsh

      - name: Build
        if: steps.download_artifacts.outcome != 'success'
        run: dotnet build --configuration Release --no-restore
        shell: pwsh

      - name: Run unit tests
        run: |
          $TEST_PROJECTS = Get-ChildItem -Path tests -Filter "*.csproj" -Recurse
          if (-not $TEST_PROJECTS) {
            Write-Error "No test projects found in tests directory"
            exit 1
          }
          $LOG_MODE = "${{ inputs.log-mode || github.event.inputs.log-mode || 'failed-only' }}"
          foreach ($PROJ in $TEST_PROJECTS) {
            Write-Host "Running tests for $PROJ with log mode $LOG_MODE"
            if ($LOG_MODE -eq "failed-only") {
              # Run tests with detailed output, capture to file, and filter for failed tests
              $OUTPUT_FILE = "test-output-$($PROJ.BaseName).txt"
              dotnet test $PROJ --configuration Release --no-build --verbosity normal --framework net48 --logger "console;verbosity=detailed" | Tee-Object -FilePath $OUTPUT_FILE
              $EXIT_CODE_NET48 = $LASTEXITCODE
              $FAILED_TESTS_NET48 = Select-String -Path $OUTPUT_FILE -Pattern "Failed\s+.*" | ForEach-Object { $_.Line }
              if ($FAILED_TESTS_NET48) {
                Write-Host "Failed tests for $PROJ (net48):"
                $FAILED_TESTS_NET48 | ForEach-Object { Write-Host $_ }
              } else {
                Write-Host "No failed tests for $PROJ (net48)"
              }
              dotnet test $PROJ --configuration Release --no-build --verbosity normal --framework net8.0 --logger "console;verbosity=detailed" | Tee-Object -FilePath $OUTPUT_FILE
              $EXIT_CODE_NET80 = $LASTEXITCODE
              $FAILED_TESTS_NET80 = Select-String -Path $OUTPUT_FILE -Pattern "Failed\s+.*" | ForEach-Object { $_.Line }
              if ($FAILED_TESTS_NET80) {
                Write-Host "Failed tests for $PROJ (net8.0):"
                $FAILED_TESTS_NET80 | ForEach-Object { Write-Host $_ }
              } else {
                Write-Host "No failed tests for $PROJ (net8.0)"
              }
              if ($EXIT_CODE_NET48 -ne 0 -or $EXIT_CODE_NET80 -ne 0) { exit 1 }
            } else {
              # Run tests with specified verbosity
              $VERBOSITY = if ($LOG_MODE -eq "detailed") { "detailed" } else { "minimal" }
              dotnet test $PROJ --configuration Release --no-build --verbosity $VERBOSITY --framework net48
              if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }
              dotnet test $PROJ --configuration Release --no-build --verbosity $VERBOSITY --framework net8.0
              if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }
            }
          }
        shell: pwsh